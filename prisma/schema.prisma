// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  lastName              String?
  middleInitial         String?
  // username       String    @unique
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?                @db.Text
  hashedPassword        String?
  phoneNumber           String?                @unique
  address               String?
  country               String?
  state                 String?
  city                  String?
  zip                   String?
  userId                String?                @unique // 01-2024 02-2024 etc..
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  companyName           String?
  points                Float                  @default(0)
  requestLeft           Float                  @default(3) // claimed items in agriquest. 3 requests per trader only // if successful claim then - 1 the request of claimer
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  role                  Role                   @default(DONATOR)
  accounts              Account[]
  reviews               Reviews[]
  News                  News[]
  community             Community[]
  Transaction           Transaction[]
  post                  Post[]
  tradee                Trade[]                @relation("Tradee")
  trader                Trade[]                @relation("Trader")
  Donation              Donation[]
  notificationsReceived Notification[]
  AgriChange            AgriChange[]
  claimedAgrichange     Claim[]
  requests              Request[]

  // user (ADMIN) can create many agriquest items
  createdAgriquests Agriquest[] @relation("CreatedBy")
  // user (TRADER) can request and claim many agriquest items
  claimedAgriquests Agriquest[] @relation("Claimed")
}

enum Role {
  DONATOR
  TRADER
  ADMIN
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Post {
  id                String        @id @default(cuid())
  image             String        @db.Text
  name              String
  description       String        @db.Text
  quantity          Float         @default(0)
  weight            Float
  color             String
  type              Types?
  isFavorite        Boolean       @default(false)
  category          Category
  subcategory       Subcategory?
  status            Status
  shelfLifeDuration Int
  shelfLifeUnit     ShelfLifeUnit
  preferedOffers    String
  harvestDate       DateTime
  proof             String?
  reviews           Reviews[]
  transaction       Transaction[]
  trades            Trade[]
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

enum ShelfLifeUnit {
  DAY
  WEEK
  MONTH
  YEAR
}

enum Category {
  FRESH_FRUIT
  VEGETABLES
  TOOLS
  EQUIPMENTS
  SEEDS
  SOILS
  FERTILIZER
}

enum Subcategory {
  LEAFY_VEGETABLES
  PODDED_VEGETABLES
  FRUIT_VEGETABLES
  ROOT_VEGETABLES
  HERBS_VEGETABLES
  FRUIT1
  FRUIT2
  SMALL
  MEDIUM
  LARGE
  SEEDS1
  SEEDS2
  ORGANIC_SOIL
  NOT_ORGANIC_SOIL
  ORGANIC_FERTILIZER
  NOT_ORGANIC_FERTILIZER
  // TO BE ADDED
}

model AgriChange {
  id           String        @id @default(cuid())
  image        String        @db.Text
  name         String
  description  String        @db.Text
  quantity     Float         @default(0)
  weight       Float
  color        String
  type         Types?
  isFavorite   Boolean       @default(false)
  category     Category
  subcategory  Subcategory?
  status       Status
  shelfLife    String
  pointsNeeded Float
  transaction  Transaction[]
  harvestDate  DateTime
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  claim Claim[]
}

model Claim {
  id        String      @id @default(cuid())
  itm       String      @unique
  status    ClaimStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  agriChange   AgriChange @relation(fields: [agriChangeId], references: [id], onDelete: Cascade)
  agriChangeId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model Agriquest {
  id          String   @id @default(cuid())
  image       String   @db.Text
  name        String
  description String
  quantity    Float    @default(0)
  // weight      Float
  // color       String
  shelfLife   String
  // type        Types?
  category    Category
  // subcategory Subcategory
  // harvestDate DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  // user relation who created the agriquest (ADMIN)
  createdBy   User     @relation("CreatedBy", fields: [createdById], references: [id], onDelete: Cascade)
  createdById String
  // relation to users who claimed the agriquest (TRADER)
  claimedBy   User[]   @relation("Claimed")

  request Request[]
}

model Request {
  id        String      @id @default(cuid())
  aq        String      @unique
  status    ClaimStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  agriquest   Agriquest @relation(fields: [agriquestId], references: [id], onDelete: Cascade)
  agriquestId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

enum ClaimStatus {
  PENDING
  APPROVED
  DECLINED
}

enum Status {
  OUTOFSTOCK
  INSTOCK
  LOWSTOCK
}

enum Types {
  ORGANIC
  NOT_ORGANIC
}

model Reviews {
  id        String   @id @default(cuid())
  review    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  Post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
}

model News {
  id         String   @id @default(cuid())
  title      String
  capturedBy String
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  writer   User   @relation(fields: [writerId], references: [id], onDelete: Cascade)
  writerId String
}

model Community {
  id             String   @id @default(cuid())
  thumbnail      String   @db.Text
  name           String
  story          String   @db.Text
  communityImage String?  @db.Text
  title          String?
  currentDonated Float    @default(0) // current donation sa community na yon
  neededDonation Float // target donation na ma-reach
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  User   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String?

  donations Donation[]
}

// to get number of donators by community use this model fetch it by Community ID...
model Donation {
  id           String         @id @default(cuid())
  dn           String         @unique
  donatee      String
  name         String
  product      String
  quantity     Float
  image        String
  pointsToGain Float
  status       DonationStatus @default(PENDING)
  category     Category?
  subcategory  Subcategory?
  proof        String?
  // name                String
  // lastName            String
  // phoneNumber         String
  // email               String
  // district            String
  // zip                 String
  // category            Category
  // productName         String
  // condition           String
  // quantity            String
  // preservationReq     String
  // deliveryTime        DateTime
  // deliveryAddress     String
  // specialInstructions String   @db.Text
  // comment             String   @db.Text
  // image               String   @db.Text
  // isAnonymous         Boolean
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  donator   User   @relation(fields: [donatorId], references: [id], onDelete: Cascade)
  donatorId String

  Community   Community? @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId String?
}

enum DonationStatus {
  PENDING
  CANCELLED
  APPROVED
}

model Transaction {
  id     String          @id @default(cuid())
  ps     String? // mali ps explain sakanila kung bakit // no need Points ID sa points table
  itm    String? // eto tama to kaso to do pa dahil wala pang claiming functionality.
  dn     String?
  trd    String?
  aq     String?
  type   TransactionType
  points Float           @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  postId String?
  post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)

  agrichange   AgriChange? @relation(fields: [agrichangeId], references: [id], onDelete: Cascade)
  agrichangeId String?
}

enum TransactionType {
  TRADE
  DONATE
  EARN
  CLAIM
}

// dito iffetch yung product na gustong ipang trade
// once trade is COMPLETED make a transaction.create based on trade values para mapalabas siya sa transaction history.
model Trade {
  id             String       @id @default(cuid())
  trd            String       @unique
  item           String
  image          String       @db.Text
  quantity       Float
  shelfLife      String
  tradedQuantity Float
  weight         Float
  value          Float
  description    String       @db.Text
  proofTradee    String? // gamitan ng OR method para maipasa value
  proofTrader    String? // gamitan ng OR method para maipasa value
  status         StatusType   @default(PENDING)
  category       Category?
  subcategory    Subcategory? // trader PE
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  // yung nag post, pwede ma-fetch dito yung pinost na product
  tradeeId String
  tradee   User   @relation(fields: [tradeeId], references: [id], onDelete: Cascade, name: "Tradee")

  // yung nag trade intent, pwede ma-fetch dito yung gusto ipang trade
  traderId String
  trader   User   @relation(fields: [traderId], references: [id], onDelete: Cascade, name: "Trader")

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  notifications Notification[]
}

enum StatusType {
  PENDING // TRADE INTENT
  PROCESSING // INACCEPT NA NG TRADEE YUNG TRADE INTENT
  COMPLETED // ADMIN HAS CONFIRMED THAT TRADE IS INDEED SUCCESSFUL // IF COMPLETED THEN BAWAS NA QTY KAAGAD
  CANCELLED // ADMIN FINDS THE TRADE SUSPICIOUS
}

// every time na magbabago yung notification like from pending to processing  
model Notification {
  id        String     @id @default(cuid())
  type      StatusType @default(PENDING)
  isRead    Boolean    @default(false)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // user na naka receive ng notification.
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // dito iffetch yung current trade intent na pending shempre.
  tradeId String?
  trade   Trade?  @relation(fields: [tradeId], references: [id], onDelete: Cascade)
}

//NOT SURE PA DITO -- di na ata kailangan to, i-fetch nalang to sa model Transaction at dagdagan ang transaction type ng CLAIM.
// if nag claim si user then deduct points
// model ClaimedProduct {
//   id        String   @id @default(cuid())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   userId String
//   user   User   @relation(fields: [userId], references: [id])

//   Post   Post?   @relation(fields: [postId], references: [id])
//   postId String?
// }
