// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  lastName              String?
  middleInitial         String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?                @db.Text
  hashedPassword        String?
  phoneNumber           String?                @unique
  address               String?
  country               String?
  state                 String?
  brgy                  String?
  district              String?
  city                  String?
  zip                   String?
  userId                String?                @unique
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  companyName           String?
  points                Float                  @default(0)
  requestLeft           Float                  @default(3)
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  role                  Role                   @default(DONATOR)
  accounts              Account[]
  reviews               Reviews[]
  News                  News[]
  community             Community[]
  Transaction           Transaction[]
  post                  Post[]
  tradee                Trade[]                @relation("Tradee")
  trader                Trade[]                @relation("Trader")
  Donation              Donation[]
  notificationsReceived Notification[]
  AgriChange            AgriChange[]
  claimedAgrichange     Claim[]
  requests              Request[]
  createdAgriquests     Agriquest[]            @relation("CreatedBy")
  claimedAgriquests     Agriquest[]            @relation("Claimed")
  report                Report[]
  isBanned              Boolean                @default(false)
  banUntil              DateTime?
  banCount              Float                  @default(0)
  // chatroomUser1 ChatRoom[] @relation("ChatroomUser1")
  // chatroomUser2 ChatRoom[] @relation("ChatroomUser2")

  // sender Message[] @relation("Sender")
  // sendee Message[] @relation("Sendee")

  ChatRoom ChatRoom[]

  Message Message[]
}

enum Role {
  DONATOR
  TRADER
  ADMIN
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model ChatRoom {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  participants User[]
  messages     Message[]
}

model Message {
  id        String   @id @default(cuid())
  image     String?
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId String

  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  chatRoomId String
}

// model ChatRoom {
//   id        String   @id @default(cuid())
//   createdAt DateTime @default(now())

//   chatroomUser1Id String
//   chatroomUser1   User   @relation(fields: [chatroomUser1Id], references: [id], onDelete: Cascade, name: "ChatroomUser1")

//   chatroomUser2Id String
//   chatroomUser2   User   @relation(fields: [chatroomUser2Id], references: [id], onDelete: Cascade, name: "ChatroomUser2")

//   messages Message[]
// }

// model Message {
//   id        String   @id @default(cuid())
//   image     String?
//   content   String
//   createdAt DateTime @default(now())

//   senderId String
//   sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade, name: "Sender")

//   sendeeId String
//   sendee   User   @relation(fields: [sendeeId], references: [id], onDelete: Cascade, name: "Sendee")

//   ChatRoom   ChatRoom? @relation(fields: [chatRoomId], references: [id])
//   chatRoomId String?
// }

model Post {
  id                String         @id @default(cuid())
  image             String         @db.Text
  name              String
  description       String         @db.Text
  quantity          Float          @default(0) // eto yung magsisilbing KILO / PIECE/S / PACK
  weight            Float
  color             String
  type              Types?
  size              String?
  isFavorite        Boolean        @default(false)
  category          Category
  subcategory       Subcategory?
  status            Status
  shelfLifeDuration Int?
  shelfLifeUnit     ShelfLifeUnit?
  preferedOffers    String
  harvestDate       DateTime?
  proof             String?
  reviews           Reviews[]
  transaction       Transaction[]
  trades            Trade[]
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  report Report[]
}

enum ShelfLifeUnit {
  DAY
  WEEK
  MONTH
  YEAR
}

enum Category {
  FRESH_FRUIT
  VEGETABLES
  TOOLS
  EQUIPMENTS
  SEEDS
  SOILS
  FERTILIZER
}

enum Subcategory {
  LEAFY_VEGETABLES
  PODDED_VEGETABLES
  FRUIT_VEGETABLES
  ROOT_VEGETABLES
  HERBS_VEGETABLES
  FRUIT1
  FRUIT2
  CITRUS_FRUITS
  COCONUT
  TROPICAL_FRUIT
  SMALL
  MEDIUM
  LARGE
  SEEDS1
  SEEDS2
  ORGANIC_SOIL
  NOT_ORGANIC_SOIL
  ORGANIC_FERTILIZER
  NOT_ORGANIC_FERTILIZER
  WHEEL_BARROW
  WATER_HOSE
  GARDEN_POTS
  BUCKET
  GLOVES
  HAND_PRUNES
  KALAYKAY
  HOES
  SHOVEL
  Calamansi
  MandarinOrange
  Banana
  Mango
  Avocado
  CottonFruit
  Pineapple
  Soursop
  CustardApple
  Papaya
  Lanzones
  AmpalayaLeaves
  WaterSpinach
  SweetPotatoLeaves
  MalabarSpinach
  JewsMallow
  ChiliLeaves
  Moringaoleifera
  TaroLeaves
  OnionLeaves
  PetchayNative
  PetchayBaguio
  CabbageRareBall
  CabbageScorpio
  Basil
  Sitao
  BaguioBeans
  GiantPatani
  Eggplant
  Ampalaya
  Tomato
  Chili
  BellPepperGreen
  BellPepperRed
  Squash
  BlueTarnette
  Patola
  Okra
  Carrots
  WhitePotato
  Chayote
  RedOnion
  WhiteOnion
  WhiteOnionImported
  GarlicImported
  GarlicNative
  Ginger
  GiantPataniSeed
  BlueTarnetteSeed
  AmpalayaSeed
  PatolaSeed
  OkraSeed
  BasilSeed
  Talong
  Sitaw
  BaguioBeansSeed
}

model AgriChange {
  id               String        @id @default(cuid())
  image            String        @db.Text
  name             String
  description      String        @db.Text
  quantityPerTrade Float?
  quantity         Float         @default(0)
  weight           Float
  color            String
  type             Types?
  isFavorite       Boolean       @default(false)
  category         Category
  subcategory      Subcategory?
  status           Status
  shelfLife        String?
  pointsNeeded     Float
  transaction      Transaction[]
  harvestDate      DateTime?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  claim Claim[]
}

model Claim {
  id         String      @id @default(cuid())
  itm        String      @unique
  status     ClaimStatus @default(PENDING)
  quantity   Float
  pickUpDate DateTime?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  agriChange   AgriChange @relation(fields: [agriChangeId], references: [id], onDelete: Cascade)
  agriChangeId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model Agriquest {
  id               String    @id @default(cuid())
  image            String    @db.Text
  name             String
  description      String
  quantityPerTrade Float
  quantity         Float     @default(0)
  shelfLife        String?
  category         Category
  pickUpDate       DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  createdBy        User      @relation("CreatedBy", fields: [createdById], references: [id], onDelete: Cascade)
  createdById      String
  claimedBy        User[]    @relation("Claimed")
  request          Request[]
}

model Request {
  id         String      @id @default(cuid())
  aq         String      @unique
  status     ClaimStatus @default(PENDING)
  pickUpDate DateTime?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  agriquest   Agriquest @relation(fields: [agriquestId], references: [id], onDelete: Cascade)
  agriquestId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

enum ClaimStatus {
  PENDING
  APPROVED
  DECLINED
}

enum Status {
  OUTOFSTOCK
  INSTOCK
  LOWSTOCK
}

enum Types {
  ORGANIC
  NOT_ORGANIC
}

model Reviews {
  id        String   @id @default(cuid())
  review    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  Post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
}

model News {
  id         String   @id @default(cuid())
  title      String
  capturedBy String
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  writer   User   @relation(fields: [writerId], references: [id], onDelete: Cascade)
  writerId String
}

model Community {
  id             String   @id @default(cuid())
  thumbnail      String   @db.Text
  name           String
  story          String   @db.Text
  communityImage String?  @db.Text
  title          String?
  currentDonated Float    @default(0) // current donation sa community na yon
  neededDonation Float
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  User   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String?

  donations Donation[]
}

model Donation {
  id           String         @id @default(cuid())
  dn           String         @unique
  donatee      String?
  name         String
  product      String?
  quantity     Float
  image        String?
  pointsToGain Float
  status       DonationStatus @default(PENDING)
  category     Category?
  subcategory  Subcategory?
  size         String?
  proof        String?
  pickUpDate   DateTime?
  cancelType   CancelType?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  donator   User   @relation(fields: [donatorId], references: [id], onDelete: Cascade)
  donatorId String

  Community   Community? @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId String?

  Coordinates   Coordinates? @relation(fields: [coordinatesId], references: [id], onDelete: Cascade)
  coordinatesId String?
}

enum CancelType {
  NotAvailable
  ChangeOfMind
  ChangeOfDonation
  FailedToAppear
  Others
}

enum DonationStatus {
  PENDING
  CANCELLED
  DECLINED
  APPROVED
}

model Transaction {
  id     String          @id @default(cuid())
  ps     String?
  itm    String?
  dn     String?
  trd    String?
  aq     String?
  type   TransactionType
  points Float           @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  postId String?
  post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)

  agrichange   AgriChange? @relation(fields: [agrichangeId], references: [id], onDelete: Cascade)
  agrichangeId String?
}

enum TransactionType {
  TRADE
  DONATE
  EARN
  CLAIM
}

model Trade {
  id                  String       @id @default(cuid())
  trd                 String       @unique
  item                String
  image               String       @db.Text
  quantity            Float?
  shelfLife           String?
  tradedQuantity      Float
  weight              Float
  value               Float?
  description         String       @db.Text
  tradeeConditionRate Float?
  traderConditionRate Float?
  proofTradee         String?
  proofTrader         String?
  status              StatusType   @default(PENDING)
  category            Category?
  subcategory         Subcategory?
  size                String?
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  cancelType          CancelType?
  // yung nag post, pwede ma-fetch dito yung pinost na product

  tradeeId String
  tradee   User   @relation(fields: [tradeeId], references: [id], onDelete: Cascade, name: "Tradee")

  traderId String
  trader   User   @relation(fields: [traderId], references: [id], onDelete: Cascade, name: "Trader")

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  notifications Notification[]
}

enum StatusType {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}

model Report {
  id         String     @id @default(cuid())
  reportType ReportType

  postId     String?
  post       Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId     String?
  reportedBy User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  issue     Issue
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // trade   Trade?   @relation(fields: [tradeId], references: [id], onDelete: Cascade, name: "Trade")
  // tradeId String?
  // post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade, name: "Post")
  // postId String?
  // donation   Donation?   @relation(fields: [donationId], references: [id], onDelete: Cascade, name: "Donation")
  // donationId String?
}

enum ReportType {
  TRADER
  DONATION
  POST
}

enum Issue {
  InnapropirateImage
  DisrespecfulPost
  WrongInformation
  GraphicViolence
  Harassment
  Bullying
  Others
}

model Notification {
  id            String           @id @default(cuid())
  urbanFarmName String? // optional ang pinaka use lang nito ay para sa DONATIONARRIVED
  type          NotificationType @default(PENDING)
  isRead        Boolean          @default(false)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  tradeId String?
  trade   Trade?  @relation(fields: [tradeId], references: [id], onDelete: Cascade)
}

enum NotificationType {
  PENDING // (DONE)
  TRADERACCEPTED // TRADE ACCEPTED
  TRADEEACCEPTED // TRADE ACCEPTED
  TRADERDECLINE // TRADE DECLINED
  TRADEEDECLINE // TRADE DECLINED
  TRADERCOMPLETE // TRADE COMPLETED
  TRADEECOMPLETE // TRADE COMPLETED
  DONATIONPENDING // DONATION SENT
  DONATIONCANCELLED // DONATION CANCELLED BY ADMIN
  DONATIONAPPROVED // DONATION APPROVED BY ADMIN
  DONATIONARRIVED // DONATION NAPUNTA NA SA DESIGNATED URBAN FARM
  PROCESSING // AGRICLAIM PROCESSED (DONE)
  COMPLETED // AGRICLAIM COMPLETE (DONE)
  CANCELLED // AGRICLAIM CANCELLED (DONE)
  AGRIQUESTPENDING // AQ PENDING (DONE)
  AGRIQUESTCANCELLED // AQ CANCELLED (DONE)
  AGRIQUESTAPPROVED // AQ APPROVED (DONE)
  ADMINDONATION // notify admin that a user has donated
  AGRIQUEST //
  AGRICHANGE //
}

model Coordinates {
  id   String @id @default(cuid())  
  name String @unique
  lat  Float
  lang Float

  donations Donation[]
}