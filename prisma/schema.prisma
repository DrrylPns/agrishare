// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id             String        @id @default(cuid())
  name           String?
  lastName       String?
  middleInitial  String?
  // username       String    @unique
  email          String?       @unique
  emailVerified  DateTime?
  image          String?       @db.Text
  hashedPassword String?
  phoneNumber    String?       @unique
  address        String?
  country        String?
  state          String?
  city           String?
  zip            String?
  userId         String?       @unique
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  companyName    String?
  points         Float         @default(0)
  role           Role          @default(DONATOR)
  accounts       Account[]
  sessions       Session[]
  reviews        Reviews[]
  News           News[]
  community      Community[]
  Transaction    Transaction[]
  Post           Post[]
  tradee         Trade[]       @relation("Tradee")
  trader         Trade[]       @relation("Trader")
  Donation       Donation[]
}

enum Role {
  DONATOR
  TRADER
  ADMIN
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id             String        @id @default(cuid())
  image          String        @db.Text
  name           String
  description    String        @db.Text
  quantity       Float         @default(0)
  weight         Float
  color          String
  type           Types
  isFavorite     Boolean       @default(false)
  category       Category
  status         Status
  shelfLife      String
  preferedOffers String
  harvestDate    DateTime
  reviews        Reviews[]
  transaction    Transaction[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

enum Category {
  FRESH_FRUIT
  VEGETABLES
  TOOLS
  EQUIPMENTS
  SEEDS
  SOILS
  FERTILIZER
}

enum Status {
  OUTOFSTOCK
  INSTOCK
  LOWSTOCK
}

enum Types {
  ORGANIC
  INORGANIC
}

model Reviews {
  id        String   @id @default(cuid())
  review    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User   User   @relation(fields: [userId], references: [id])
  userId String

  Post   Post   @relation(fields: [postId], references: [id])
  postId String
}

model News {
  id         String   @id @default(cuid())
  title      String
  capturedBy String
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  writer   User   @relation(fields: [writerId], references: [id], onDelete: Cascade)
  writerId String
}

model Community {
  id             String   @id @default(cuid())
  thumbnail      String   @db.Text
  name           String
  story          String   @db.Text
  //donations      Int      @default(0) // kung ilan na nag donate // based to sa figma. // to get number of donations use  prisma.count donation based on community ID
  currentDonated Float    @default(0) // current donation sa community na yon
  neededDonation Float // target donation na ma-reach
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  User   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String?

  donations Donation[]
}

// to get number of donators by community use this model fetch it by Community ID...
model Donation {
  id                  String   @id @default(cuid())
  // fetch full name, contact #, email at zip sa session
  name                String // can fetch and be used as default values
  lastName            String // can fetch and be used as default values
  phoneNumber         String // can fetch and be used as default values
  email               String // can fetch and be used as default values
  district            String
  zip                 String // can fetch and be used as default values
  category            Category
  productName         String
  condition           String
  quantity            String
  preservationReq     String
  deliveryTime        DateTime
  deliveryAddress     String
  specialInstructions String   @db.Text
  comment             String   @db.Text
  image               String   @db.Text
  isAnonymous         Boolean
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  donator   User   @relation(fields: [donatorId], references: [id], onDelete: Cascade)
  donatorId String

  Community   Community @relation(fields: [communityId], references: [id])
  communityId String
}

model Transaction {
  id     String          @id @default(cuid())
  type   TransactionType
  points Float           @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  Post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String?
}

enum TransactionType {
  TRADE
  DONATE
  EARN
  CLAIM
}

// dito iffetch yung product na gustong ipang trade
// once trade is COMPLETED make a transaction.create based on trade values para mapalabas siya sa transaction history.
model Trade {
  id          String     @id @default(cuid())
  image       String     @db.Text
  quantity    Float
  weight      Float
  value       Float
  description String     @db.Text
  category    Category
  status      StatusType
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // yung nag post, pwede ma-fetch dito yung pinost na product
  tradeeId String
  tradee   User   @relation(fields: [tradeeId], references: [id], onDelete: Cascade, name: "Tradee")

  // yung nag trade intent
  traderId String
  trader   User   @relation(fields: [traderId], references: [id], onDelete: Cascade, name: "Trader")
}

enum StatusType {
  PENDING // TRADE INTENT 
  PROCESSING // INACCEPT NA NG TRADEE YUNG TRADE INTENT
  COMPLETED // BOTH PARTIES HAVE CONFIRMED THAT TRADE IS COMPLETE.
}

//NOT SURE PA DITO -- di na ata kailangan to, i-fetch nalang to sa model Transaction at dagdagan ang transaction type ng CLAIM.
// if nag claim si user then deduct points
// model ClaimedProduct {
//   id        String   @id @default(cuid())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   userId String
//   user   User   @relation(fields: [userId], references: [id])

//   Post   Post?   @relation(fields: [postId], references: [id])
//   postId String?
// }
