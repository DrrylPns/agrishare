// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id             String           @id @default(cuid())
  name           String?
  lastName       String?
  middleInitial  String?
  // username       String    @unique
  email          String?          @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  phoneNumber    String?          @unique
  address        String?
  country        String?
  state          String?
  city           String?
  zip            String?
  userId         String?          @unique
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  companyName    String?
  points         Float            @default(0)
  role           Role             @default(DONATOR)
  accounts       Account[]
  sessions       Session[]
  reviews        Reviews[]
  News           News[]
  community      Community[]
  Transaction    Transaction[]
  ClaimedProduct ClaimedProduct[]
  Post           Post[]
}

enum Role {
  DONATOR
  TRADER
  ADMIN
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id             String           @id @default(cuid())
  image          String           @db.Text
  name           String
  description    String           @db.Text
  quantity       Float            @default(0)
  weight         Float
  color          String
  type           Types
  isFavorite     Boolean          @default(false)
  category       Category
  status         Status
  shelfLife      String
  preferedOffers String
  harvestDate    DateTime
  reviews        Reviews[]
  transaction    Transaction[]
  claimedProduct ClaimedProduct[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  User   User   @relation(fields: [userId], references: [id])
  userId String
}

enum Category {
  FRESH_FRUIT
  VEGETABLES
  TOOLS 
  EQUIPMENTS
  SEEDS
  SOILS
  FERTILIZER
}

enum Status {
  OUTOFSTOCK
  INSTOCK
  LOWSTOCK
}

enum Types {
  ORGANIC
  INORGANIC
}

model Reviews {
  id        String   @id @default(cuid())
  review    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User   User   @relation(fields: [userId], references: [id])
  userId String

  Post   Post   @relation(fields: [postId], references: [id])
  postId String
}

model News {
  id         String   @id @default(cuid())
  title      String
  capturedBy String
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  writer   User   @relation(fields: [writerId], references: [id], onDelete: Cascade)
  writerId String
}

model Community {
  id             String   @id @default(cuid())
  thumbnail      String   @db.Text
  name           String
  story          String   @db.Text
  donations      Int      @default(0) // kung ilan na nag donate // based to sa figma.
  currentDonated Float    @default(0) // current donation sa community na yon
  neededDonation Float // target donation na ma-reach
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  User           User?    @relation(fields: [userId], references: [id])
  userId         String?
}

model Transaction {
  id        String          @id @default(cuid())
  type      TransactionType
  points    Float           @default(0)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])

  Post   Post?   @relation(fields: [postId], references: [id])
  postId String?
}

enum TransactionType {
  TRADE
  DONATE
  EARN
}

//NOT SURE PA DITO
model ClaimedProduct {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])

  Post   Post?   @relation(fields: [postId], references: [id])
  postId String?
}
